# Generated by Django 2.0 on 2018-03-30 15:27

from django.db import migrations, models
import django.db.models.deletion
import results.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_submitter', models.BooleanField(default=False, help_text='Whether or not to e-mail the patch submitter')),
                ('email_recipients', models.BooleanField(default=False, help_text='Whether to e-mail the recipients of the patch')),
                ('email_owner', models.BooleanField(default=True, help_text='Whether to e-mail the owner group of the environment')),
                ('email_list', models.CharField(blank=True, default='dpdklab@iol.unh.edu', help_text='Mailing list to cc on all e-mails', max_length=128)),
            ],
            options={
                'verbose_name_plural': 'contact policies',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inventory_id', models.CharField(help_text='Site equipment inventory label/identifier', max_length=64)),
                ('motherboard_make', models.CharField(help_text='Motherboard manufacturer of Device Under Test', max_length=64)),
                ('motherboard_model', models.CharField(help_text='Motherboard model of Device Under Test', max_length=64)),
                ('motherboard_serial', models.CharField(help_text='Motherboard/system serial number of Device Under Test', max_length=64)),
                ('cpu_socket_count', models.PositiveIntegerField(help_text='Number of populated physical CPUs in Device Under Test')),
                ('cpu_cores_per_socket', models.PositiveIntegerField(help_text='Number of cores per physical CPU in Device Under Test')),
                ('cpu_threads_per_core', models.PositiveIntegerField(default=1, help_text='Number of threads per core in Device Under Test')),
                ('ram_type', models.CharField(max_length=64)),
                ('ram_size', models.PositiveIntegerField(help_text='Size of RAM in megabytes for Device Under Test')),
                ('ram_channel_count', models.PositiveIntegerField(default=1, help_text='Number of memory channels for Device Under Test')),
                ('ram_frequency', models.PositiveIntegerField(help_text='RAM frequency in megahertz for Device Under Test')),
                ('nic_make', models.CharField(help_text='Manufaturer of NIC under test', max_length=64)),
                ('nic_model', models.CharField(help_text='Model of NIC under test', max_length=64)),
                ('nic_device_id', models.CharField(help_text='Bus-specific address or identifier of NIC under test', max_length=64)),
                ('nic_device_bustype', models.CharField(default='pci', help_text='Local bus type used by device under test', max_length=64)),
                ('nic_pmd', models.CharField(help_text='DPDK Physical Media Dependent (PMD) driver for testing', max_length=64)),
                ('nic_firmware_source_id', models.CharField(blank=True, help_text='Source control revision for NIC firmware', max_length=64)),
                ('nic_firmware_version', models.CharField(help_text='Official firmware version', max_length=64)),
                ('kernel_cmdline', models.CharField(blank=True, help_text='Kernel command line for device under test', max_length=4096)),
                ('kernel_name', models.CharField(default='linux', help_text='Name of operating system kernel, lowercase (default linux)', max_length=32)),
                ('kernel_version', models.CharField(help_text='Version of operating system kernel, i.e., uname -r', max_length=64)),
                ('compiler_name', models.CharField(default='gcc', help_text='Name of C compiler, lowercase (default gcc)', max_length=32)),
                ('compiler_version', models.CharField(help_text='Version of C compiler', max_length=64)),
                ('bios_version', models.CharField(help_text='Version of BIOS for Device Under Test', max_length=64)),
                ('os_distro', models.CharField(help_text='Operating system distribution name and version, e.g., Fedora26', max_length=64, verbose_name='OS distribution')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group')),
                ('predecessor', models.OneToOneField(blank=True, help_text='Environment that this was cloned from', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='successor', to='results.Environment')),
            ],
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of measurement; unique within an environment', max_length=128)),
                ('unit', models.CharField(help_text='Units for this measurement value, e.g., Gbps', max_length=128)),
                ('higher_is_better', models.BooleanField(help_text='True if higher numbers are better, e.g., throughput; False otherwise, e.g., latency')),
                ('environment', models.ForeignKey(help_text='Environment that measurement applies to', on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='results.Environment')),
            ],
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of input paramater, e.g., frame_size', max_length=128)),
                ('unit', models.CharField(help_text='Unit of input parameter, e.g., bytes', max_length=128)),
                ('value', models.IntegerField(help_text='Value of input parameter')),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='results.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='Patch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patchworks_id', models.PositiveIntegerField(blank=True, help_text='ID of patch in DPDK Patchworks instance', null=True, unique=True, verbose_name='Patchwork ID')),
                ('message_id', models.CharField(help_text='Message-ID from patch submission e-mail', max_length=1024, verbose_name='Message-ID')),
                ('submitter', models.CharField(help_text='Patch submitter', max_length=128)),
                ('subject', models.CharField(help_text='Subject line of commit message', max_length=128)),
                ('version', models.CharField(help_text='Version of patchset', max_length=16)),
                ('is_rfc', models.BooleanField(default=False, help_text='Indicates that this patch is not to be merged', verbose_name='RFC?')),
                ('patch_number', models.PositiveIntegerField(help_text='Number of this patch within its patchset')),
                ('date', models.DateTimeField(help_text='Date this patch was submitted')),
                ('contacts', models.TextField(blank=True, help_text='Recipients listed in To and Cc field, as JSON string containing list of dictionaries with fields: display_name (optional), email (required), how (required, "to" or "cc")', validators=[results.models.validate_contact_list])),
            ],
            options={
                'verbose_name_plural': 'patches',
            },
        ),
        migrations.CreateModel(
            name='PatchSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_uid', models.CharField(help_text='Subset of patch e-mail Message-Id to match on', max_length=255, unique=True)),
                ('patch_count', models.PositiveIntegerField(help_text='Number of patches in the patch set')),
                ('is_public', models.BooleanField(default=True, help_text='Was the patch set posted to a public mailing list?')),
            ],
        ),
        migrations.CreateModel(
            name='Tarball',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch', models.CharField(help_text='DPDK branch that the patch set was applied to', max_length=64)),
                ('commit_id', models.CharField(help_text='git commit id that the patch set was applied to', max_length=40, verbose_name='git commit hash')),
                ('job_id', models.PositiveIntegerField(blank=True, help_text='Jenkins job id that generated this tarball\n\n        This can be NULL if the tarball was manually created.\n        ', null=True, verbose_name='Jenkins job id')),
                ('tarball_url', models.URLField(help_text='URL from which Jenkins can download this tarball', max_length=1024)),
                ('patchset', models.ForeignKey(blank=True, help_text='Patchset this tarball was constructed from', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tarballs', to='results.PatchSet')),
            ],
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.CharField(help_text='Result for this test: PASS, FAIL, WARN, N/T', max_length=4)),
                ('difference', models.FloatField(help_text='Difference between actual and expected values')),
                ('expected_value', models.FloatField(blank=True, help_text='Value of measurement expected by vendor', null=True)),
                ('measurement', models.ForeignKey(help_text='Vendor expected measurement that this result corresponds to', on_delete=django.db.models.deletion.CASCADE, to='results.Measurement')),
            ],
        ),
        migrations.CreateModel(
            name='TestRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='Date and time that test was run', verbose_name='time run')),
                ('log_output_file', models.URLField(help_text='External URL of log output file')),
                ('environment', models.ForeignKey(help_text='Environment that this test run was executed on', on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='results.Environment')),
                ('tarball', models.ForeignKey(help_text='Tarball used for test run', on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='results.Tarball')),
            ],
        ),
        migrations.AddField(
            model_name='testresult',
            name='run',
            field=models.ForeignKey(help_text='Test run that this result is part of', on_delete=django.db.models.deletion.CASCADE, related_name='results', to='results.TestRun'),
        ),
        migrations.AddField(
            model_name='patch',
            name='patchset',
            field=models.ForeignKey(help_text='Patchset containing this patch', on_delete=django.db.models.deletion.CASCADE, related_name='patches', to='results.PatchSet'),
        ),
        migrations.AddField(
            model_name='contactpolicy',
            name='environment',
            field=models.OneToOneField(help_text='Environment that this contact policy applies to', on_delete=django.db.models.deletion.CASCADE, related_name='contact_policy', to='results.Environment'),
        ),
    ]
